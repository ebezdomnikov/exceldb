<?php namespace App\Exceldb;

use App\Service\RatchetClient\RatchetClient;

/**
 * @package     App\Exceldb
 */
class Client extends RatchetClient
{
	/**
	 * @var
	 */
	private $filename;

	/**
	 * Client constructor.
	 *
	 * @param $filename
	 */
	public function __construct($filename)
	{
		$this->filename = $filename;
		parent::__construct("xls");
	}

	/**
	 * @param $colRow
	 *
	 * @return array
	 */
	public function cellRead($colRow)
	{
		return $this->send('readcell',[$this->filename, $colRow]);
	}

	/**
	 * @param $colRow
	 * @param $data
	 *
	 * @return array
	 */
	public function cellWrite($colRow, $data)
	{
		return $this->send('writecell',[$this->filename, $colRow, $data]);
	}

	/**
	 * @param $rangeName
	 *
	 * @return array
	 */
	public function readRange($rangeName)
	{
		return $this->send('readrange',[$this->filename, $rangeName]);
	}

	/**
	 * @param int  $pColumn
	 * @param int  $pRow
	 * @param null $pValue
	 * @param bool $returnCell
	 *
	 * @return array
	 */
	public function setCellValueByColumnAndRow($pColumn = 0, $pRow = 1, $pValue = null, $returnCell = false)
    {
        return $this->send('setCellValueByColumnAndRow',[$this->filename,$pColumn,$pRow,$pValue,$returnCell]);
    }
	/**
	 * @param $rangeName
	 *
	 * @return array
	 */
	public function getNamedRange_getRange($rangeName)
	{
		return $this->send('getNamedRange_getRange',[$this->filename,$rangeName]);
	}


	public function isCellProtected($pCoord)
	{
		return $this->send('isCellProtected',[$this->filename,$pCoord]);
	}
	/**
	 * @param $index
	 *
	 * @return array
	 */
	public function setActiveSheetIndex($index)
	{
		return $this->send('setActiveSheetIndex',[$this->filename,$index]);
	}

	/**
	 * @param $rangeName
	 *
	 * @return array
	 */
	public function getWorkSheetIndexByRangeName($rangeName)
	{
		return $this->send('getWorkSheetIndexByRangeName',[$this->filename,$rangeName]);
	}

	/**
	 * @param $pNamedRange
	 * @param $nullValue
	 * @param $calculateFormulas
	 * @param $formatData
	 * @param $returnCellRef
	 *
	 * @return array
	 */
	public function namedRangeToArray($pNamedRange, $nullValue, $calculateFormulas, $formatData, $returnCellRef)
	{
		return $this->send('namedRangeToArray',[$this->filename,$pNamedRange,$nullValue,$calculateFormulas,$formatData,$returnCellRef]);
	}

	public function send($cmd, $params = [])
	{
		// добавляем к каждому запросу идентификатор пользователя
		array_unshift($params,app('UsersFactory')->Id());
		// добавляем к каждому запросу текущую сессию
		array_unshift($params,\Session::getId());

		return parent::send($cmd,$params); // TODO: Change the autogenerated stub
	}
}